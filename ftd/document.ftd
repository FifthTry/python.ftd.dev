-- ft.page-with-toc: `ftd.Document`
toc: $config.python-toc
sub-sections: $config.documentation-section
extra: $config.empty

`ftd.Document` represents a single parsed ftd document. This document should be
constructed using [`ftd.parse()`](ftd/parse/) function.

You would want to use this class only if you want to parse the document once
and render it multiple times. For one time rendering consider using
[`ftd.render()`](ftd/render/).


-- ft.h1: `Document.__init__()`

This function Initialize the `Document` object with parameters.

-- ft.code:
lang: py

def __init__(
    self,
    id: str,
    root: Optional[str] = None,
    base_url: Optional[str] = None,
    handle_processor: Callable = None,
    handle_foreign_variable: Callable = None,
    handle_import: Callable = None,
    **data,
):
    pass

-- ft.h2: `id`

`id` of the document.

-- ft.h2: `root`

Root of the FPM Package.

-- ft.h2: `base_url`

`base_url` is a `host_url` where FPM package is deployed.


-- ft.h2: `handle_processor`

`handle_processor` is a function that handles the `ftd` document `processor`.
This function only gets called if Rust written `resolve_processor` return None
value.

-- ft.h2: `handle_foreign_variable`

`handle_foreign_variable` is a function that handles the `ftd` document foreign
variables.


-- ft.h2: `handle_import`

`handle_import` is a function that handles the `ftd` document `processor`.

-- ft.h1: `ftd.Document.render()`

`ftd.Document.render()` renders current document and returns the HTML.

-- ft.code:
lang: py

class Document:
    def render(self, **data) -> str:
        pass



-- ft.h2: `data`

The document being rendered may use [`get-data`
processor](https://fpm.dev/processors/get-data/). To pass `data` is used to pass
data to `get-data`.

-- ft.h3: Example

Say we have a ftd file like this:

-- ft.code: index.ftd
lang: ftd

\-- string x:
$processor$: get-data

\-- ftd.text: $x

-- ft.markdown:

We can render it to HTML using:

-- ft.code:
lang: py


import ftd

d = ftd.parse("/")
d.render(x=10)
